<?xml version="1.0" encoding="UTF-8"?>
<model version="4.1.2" links="0">
 <documentation>This is the Blinky example for the Pololu Zumo 32U4, which blinks the on-board Red LED once per second.

Prerequisites:
- Install the QPN and Pololu zomo 32u4 libraries in Arduino
- Two good ways to do development on this:
-- Use Arduino IDE to compile and upload; Setup Arduino IDE with 'external editor' preference so you can use QM modeler for editing. Switch between them.
-- Use QM for everything, using external tools preferences as defined in the .Blinky file in the source directory.

The example uses the QP framework, which requires a tick timer to drive scheduling of state machine execution. Timer 4 is used for this purpose, which is also used by the Pololu buzzer (https://goo.gl/MKkxna)

It also displays the number of milliseconds elapsed since the last time the LED was switched, using the LCD display. This number should be about 1000 ms = 1 sec.

The example demonstrates:

1. One active object class &quot;Sumo&quot; (inside the package &quot;AOs&quot;)
2. A simple state machine


Useful documentation
1. Shortform description of Timer 4 (https://goo.gl/9tUArV)
2. 32U4 processor datasheet: (https://goo.gl/4L7tAf)
3. Zumo 32u4 arduino library (https://www.pololu.com/docs/0J63/6)
4. Using QM Modeler for Atmega328/Uno (https://goo.gl/VZYq4W)</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Sumo" superclass="qpn::QActive">
   <attribute name="millis" type="unsigned long" visibility="0x00" properties="0x00"/>
   <operation name="printElapsedTime" type="void" visibility="0x00" properties="0x00">
    <code>unsigned long ctime = millis();
unsigned long diff = ctime - me-&gt;millis;
me-&gt;millis = ctime;
lcd.clear();
lcd.print(diff);</code>
   </operation>
   <statechart>
    <initial target="../1">
     <action>me-&gt;millis = millis();
QActive_armX((QActive *)me, 0U,
    BSP_TICKS_PER_SEC, BSP_TICKS_PER_SEC);</action>
     <initial_glyph conn="2,3,5,1,24,4,-2">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="on">
     <entry brief="LED on">Sumo_printElapsedTime(me);
ledRed(HIGH);
//digitalWrite(LED_L, LOW);</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,13,3,1,24,7,-2">
       <action box="0,-2,16,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,5,22,11">
      <entry box="1,2,17,4"/>
     </state_glyph>
    </state>
    <state name="off">
     <entry brief="LED off">Sumo_printElapsedTime(me);
ledRed(LOW);
//digitalWrite(LED_L, HIGH);</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,26,3,1,26,-16,-4">
       <action box="0,-2,15,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,18,22,10">
      <entry box="1,2,15,4"/>
     </state_glyph>
    </state>
    <state_diagram size="30,30"/>
   </statechart>
  </class>
 </package>
 <directory name=".">
  <file name="Blinky.ino">
   <text>#include &quot;qpn.h&quot;     // QP-nano framework
#include &quot;Arduino.h&quot; // Arduino API

#include &quot;Zumo32U4.h&quot;

//============================================================================
// declare all AO classes...
$declare(AOs::Sumo)
//...

// AO instances and event queue buffers for them...
Sumo AO_Sumo;
Zumo32U4LCD lcd;

static QEvt l_SumoQSto[10]; // Event queue storage for Blinky
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,           (QEvt *)0,        0U                  },
    { (QActive *)&amp;AO_Sumo,  l_SumoQSto,     Q_DIM(l_SumoQSto) }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second
};

//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&amp;AO_Sumo.super, Q_STATE_CAST(&amp;Sumo_initial));
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {

    /**
        1. Generally, ignoring TC4H when writing TCNT, OCR and other registers
           (i.e. we assume it is zero) in each case as we expect the count to fit in 8 bits.
        2. General idea is to use OCR4A to generate an interrupt. We could also use the overflow interrupt, but a
           handler for that is defined in the pololu library code, so compilation will fail or we will need to 
           remove the handler from the pololu code.
        3. See below for specifics about interaction between OCR4A and OCR4C.
    */

    // TCCR4A is used to generate output pin signals (along with interrupt), but we don't want to generate output.
    TCCR4A = 0;
    // Prescale by 1/128
    TCCR4B = (0&lt;&lt;PWM4X) | (0&lt;&lt;PSR4) | (0&lt;&lt;DTPS41) | (0&lt;&lt;DTPS40) | (1&lt;&lt;CS43) | (0&lt;&lt;CS42) | (0&lt;&lt;CS41) | (0&lt;&lt;CS40);

    // For some reason, not setting TCCR4D to zero explicitly results in doubling the time interval. All initial
    // values of TCCR4D are zero according to the datasheet. Since I was unable to explain this, I have expliclty
    // set all control registers to zero instead of assuming they are zero.
    TCCR4C = 0;
    TCCR4D = 0;
    TCCR4E = 0;

    TCNT4=0x00;

    /* Calculate Timer Count Max.
        1. We don't explicilty set OCR4B/D as it is not used. Setting it has no effect (verified).
        2. We set OCR4C to the same value as OCR4A. OCR4A generates an interrupt on compare match.
           OCR4C contains the 'TOP' value,  i.e. the value to which the timer is reset.
        2.1 Note: Not setting OCR4C causes the uP to double the count. No idea why. (verified)
        2.2 Note: Setting OCR4C to zero or Setting it to a value other than OCR4A, results in no OCR4A interrupt being generated. (verified)
    */
    OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 128U) - 1;
    OCR4C =(F_CPU / BSP_TICKS_PER_SEC / 128U) - 1U;

    // Enable TIMER compare Interrupt for OCR4A
    TIMSK4= (1&lt;&lt;OCIE4A);
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 &lt;&lt; SM0) | (1 &lt;&lt; SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
$define(AOs::Sumo)
//...
</text>
  </file>
  <file name="notes.txt">
   <text>The following code works:
ISR(TIMER4_OVF_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

// Timer/Counter 4 initialization
// Clock: Sync. 15.625 kHz
// Mode: Normal top=OCR4C
// OC4A output: OC4A=Disc. /OC4A=Disc.
// OC4B output: OC4B=Disc. /OC4B=Disc.
// OC4D output: OC4D=Disc. /OC4D=Disc.
// Fault Protection: Off
// Fault Protection Noise Canceler: Off
// Fault Protection triggered on Falling Edge
// Timer4 Overflow Interrupt: On
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare D Match Interrupt: Off
// Fault Protection Interrupt: Off
// Dead Time Prescaler: 1
// Dead Time Rising Edge: 0.000 us
// Dead Time Falling Edge: 0.000 us
// Timer Period: 40 ms

// Set Timer4 for synchronous operation
PLLFRQ&amp;=(1&lt;&lt;PINMUX) | (1&lt;&lt;PLLUSB) | (0&lt;&lt;PLLTM1) | (0&lt;&lt;PLLTM0) | (1&lt;&lt;PDIV3) | (1&lt;&lt;PDIV2) | (1&lt;&lt;PDIV1) | (1&lt;&lt;PDIV0);

TCCR4A=(0&lt;&lt;COM4A1) | (0&lt;&lt;COM4A0) | (0&lt;&lt;COM4B1) | (0&lt;&lt;COM4B0) | (0&lt;&lt;FOC4A) | (0&lt;&lt;FOC4B) | (0&lt;&lt;PWM4A) | (0&lt;&lt;PWM4B);
TCCR4B=(0&lt;&lt;PWM4X) | (0&lt;&lt;PSR4) | (0&lt;&lt;DTPS41) | (0&lt;&lt;DTPS40) | (1&lt;&lt;CS43) | (0&lt;&lt;CS42) | (1&lt;&lt;CS41) | (1&lt;&lt;CS40);
TCCR4C=(0&lt;&lt;COM4A1S) | (0&lt;&lt;COM4A0S) | (0&lt;&lt;COM4B1S) | (0&lt;&lt;COM4B0S) | (0&lt;&lt;COM4D1) | (0&lt;&lt;COM4D0) | (0&lt;&lt;FOC4D) | (0&lt;&lt;PWM4D);
TCCR4D=(0&lt;&lt;FPIE4) | (0&lt;&lt;FPEN4) | (0&lt;&lt;FPNC4) | (0&lt;&lt;FPES4) | (0&lt;&lt;FPAC4) | (0&lt;&lt;FPF4) | (0&lt;&lt;WGM41) | (0&lt;&lt;WGM40);
TCCR4E=(0&lt;&lt;TLOCK4) | (0&lt;&lt;ENHC4) | (0&lt;&lt;OC4OE5) | (0&lt;&lt;OC4OE4) | (0&lt;&lt;OC4OE3) | (0&lt;&lt;OC4OE2) | (0&lt;&lt;OC4OE1) | (0&lt;&lt;OC4OE0);
TC4H=0x00;
TCNT4=0x00;
TC4H=0x00;
OCR4A=0x00;
TC4H=0x00;
OCR4B=0x00;
//TC4H=0x02;
OCR4C = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U; //OCR4C  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
//OCR4C=0x70;
TC4H=0x00;
OCR4D=0x00;
DT4=0x00;

// Timer/Counter 4 Interrupt(s) initialization
TIMSK4=(0&lt;&lt;OCIE4D) | (0&lt;&lt;OCIE4A) | (0&lt;&lt;OCIE4B) | (1&lt;&lt;TOIE4);


******************
</text>
  </file>
 </directory>
</model>
