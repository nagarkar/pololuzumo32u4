/*$file${.::Fighting.ino} ##################################################*/
/*
* Model: fighting.qm
* File:  ${.::Fighting.ino}
*
* This code has been generated by QM tool (https://state-machine.com/qm).
* DO NOT EDIT THIS FILE MANUALLY. All your changes will be lost.
*
* This program is open source software: you can redistribute it and/or
* modify it under the terms of the GNU General Public License as published
* by the Free Software Foundation.
*
* This program is distributed in the hope that it will be useful, but
* WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
* or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
* for more details.
*/
/*$endhead${.::Fighting.ino} ###############################################*/
#define Q_PARAM_SIZE 4 // 32 bit parameters (e.g. pointers) passed between events.

#include "qpn.h"     // QP-nano framework
#include "Arduino.h" // Arduino API

#include "Zumo32U4.h"

//============================================================================
// declare all AO classes...
/*$declare${AOs::Sumo} #####################################################*/
/*${AOs::Sumo} .............................................................*/
typedef struct Sumo {
/* protected: */
    QActive super;

/* public: */
    uint16_t ready_time_remaining = 0;
    const uint16_t turn_speed = 200;
    const uint16_t ready_timeout_ms = 2000;
} Sumo;

/* protected: */
static QState Sumo_initial(Sumo * const me);
static QState Sumo_paused(Sumo * const me);
static QState Sumo_ready(Sumo * const me);
static QState Sumo_fighting(Sumo * const me);
static QState Sumo_scan_right(Sumo * const me);
static QState Sumo_scan_left(Sumo * const me);
static QState Sumo_ram(Sumo * const me);
/*$enddecl${AOs::Sumo} #####################################################*/
/*$declare${AOs::ButtonEvtSimulator} #######################################*/
/*${AOs::ButtonEvtSimulator} ...............................................*/
typedef struct ButtonEvtSimulator {
/* protected: */
    QActive super;

/* public: */
    const uint8_t period = 100;
} ButtonEvtSimulator;

/* protected: */
static QState ButtonEvtSimulator_initial(ButtonEvtSimulator * const me);
static QState ButtonEvtSimulator_running(ButtonEvtSimulator * const me);
/*$enddecl${AOs::ButtonEvtSimulator} #######################################*/
/*$declare${AOs::ProximityEvtSimulator} ####################################*/
/*${AOs::ProximityEvtSimulator} ............................................*/
typedef struct ProximityEvtSimulator {
/* protected: */
    QActive super;

/* public: */
    const uint8_t period = 200;
} ProximityEvtSimulator;

/* public: */
static uint8_t ProximityEvtSimulator_getConfidence(uint8_t highValue, uint8_t lowValue);

/* protected: */
static QState ProximityEvtSimulator_initial(ProximityEvtSimulator * const me);
static QState ProximityEvtSimulator_running(ProximityEvtSimulator * const me);
/*$enddecl${AOs::ProximityEvtSimulator} ####################################*/
//...

// AO instances and event queue buffers for them...
Sumo AO_Sumo;
ButtonEvtSimulator AO_ButtonSim;
ProximityEvtSimulator AO_ProximitySim;


// Other objects
Zumo32U4LCD lcd;
Zumo32U4ButtonA buttonA;
Zumo32U4Motors motors;
Zumo32U4LineSensors lineSensors;
Zumo32U4ProximitySensors proxSensors;


static QEvt l_SumoQSto[10]; // Event queue storage for Blinky
static QEvt l_ButtonSimQSto[10];
static QEvt l_ProxSimQSto[10];
//...

//============================================================================
// QF_active[] array defines all active object control blocks ----------------
QActiveCB const Q_ROM QF_active[] = {
    { (QActive *)0,               (QEvt *)0,           0U                        },
    { (QActive *)&AO_Sumo,        l_SumoQSto,          Q_DIM(l_SumoQSto)         },
    { (QActive *)&AO_ButtonSim,   l_ButtonSimQSto,     Q_DIM(l_ButtonSimQSto)    },
    { (QActive *)&AO_ProximitySim,l_ProxSimQSto,       Q_DIM(l_ProxSimQSto)      }
};

//============================================================================
// various constants for the application...
enum {
    BSP_TICKS_PER_SEC = 1000, // number of system clock ticks in one second
};

enum Signals {
 BUTTON_PRESS_SIG = Q_USER_SIG,
 READY_TIMEOUT_SIG,
 OPPONENT_ON_RIGHT_SIG,
 OPPONENT_ON_LEFT_SIG,
 OPPONENT_IN_FRONT_SIG,
 MAXSIGS
};



//............................................................................
void setup() {
    // initialize the QF-nano framework
    QF_init(Q_DIM(QF_active));

    // initialize all AOs...
    QActive_ctor(&AO_Sumo.super, Q_STATE_CAST(&Sumo_initial));

    QActive_ctor(&AO_ButtonSim.super, Q_STATE_CAST(&ButtonEvtSimulator_initial));

    QActive_ctor(&AO_ProximitySim.super, Q_STATE_CAST(&ProximityEvtSimulator_initial));
}

//............................................................................
void loop() {
    QF_run(); // run the QF-nano framework
}

//============================================================================
// interrupts...
ISR(TIMER4_COMPA_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

//============================================================================
// QF callbacks...
void QF_onStartup(void) {

    /**
        1. Generally, ignoring TC4H when writing TCNT, OCR and other registers
           (i.e. we assume it is zero) in each case as we expect the count to fit in 8 bits.
        2. General idea is to use OCR4A to generate an interrupt. We could also use the overflow interrupt, but a
           handler for that is defined in the pololu library code, so compilation will fail or we will need to
           remove the handler from the pololu code.
        3. See below for specifics about interaction between OCR4A and OCR4C.
    */

    // TCCR4A is used to generate output pin signals (along with interrupt), but we don't want to generate output.
    TCCR4A = 0;
    // Prescale by 1/128
    TCCR4B = (0<<PWM4X) | (0<<PSR4) | (0<<DTPS41) | (0<<DTPS40) | (1<<CS43) | (0<<CS42) | (0<<CS41) | (0<<CS40);

    // For some reason, not setting TCCR4D to zero explicitly results in doubling the time interval. All initial
    // values of TCCR4D are zero according to the datasheet. Since I was unable to explain this, I have expliclty
    // set all control registers to zero instead of assuming they are zero.
    TCCR4C = 0;
    TCCR4D = 0;
    TCCR4E = 0;

    TCNT4=0x00;

    /* Calculate Timer Count Max.
        1. We don't explicilty set OCR4B/D as it is not used. Setting it has no effect (verified).
        2. We set OCR4C to the same value as OCR4A. OCR4A generates an interrupt on compare match.
           OCR4C contains the 'TOP' value,  i.e. the value to which the timer is reset.
        2.1 Note: Not setting OCR4C causes the uP to double the count. No idea why. (verified)
        2.2 Note: Setting OCR4C to zero or Setting it to a value other than OCR4A, results in no OCR4A interrupt being generated. (verified)
    */
    OCR4A  = (F_CPU / BSP_TICKS_PER_SEC / 128U) - 1;
    OCR4C =(F_CPU / BSP_TICKS_PER_SEC / 128U) - 1U;

    // Enable TIMER compare Interrupt for OCR4A
    TIMSK4= (1<<OCIE4A);
}
//............................................................................
void QV_onIdle(void) {   // called with interrupts DISABLED
    // Put the CPU and peripherals to the low-power mode. You might
    // need to customize the clock management for your application,
    // see the datasheet for your particular AVR MCU.
    SMCR = (0 << SM0) | (1 << SE); // idle mode, adjust to your project
    QV_CPU_SLEEP();  // atomically go to sleep and enable interrupts
}
//............................................................................
void Q_onAssert(char const Q_ROM * const file, int line) {
    // implement the error-handling policy for your application!!!
    QF_INT_DISABLE(); // disable all interrupts
    QF_RESET();  // reset the CPU
}

//============================================================================
// define all AO classes (state machine)...
/*$define${AOs::Sumo} ######################################################*/
/* Check for the minimum required QP version */
#if ((QP_VERSION < 601) || (QP_VERSION != ((QP_RELEASE^4294967295U) % 0x3E8)))
#error qpn version 6.0.1 or higher required
#endif
/*${AOs::Sumo} .............................................................*/
/*${AOs::Sumo::SM} .........................................................*/
static QState Sumo_initial(Sumo * const me) {
    /*${AOs::Sumo::SM::initial} */
    return Q_TRAN(&Sumo_paused);
}
/*${AOs::Sumo::SM::paused} .................................................*/
static QState Sumo_paused(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::paused} */
        case Q_ENTRY_SIG: {
            ledRed(HIGH);

            lcd.clear();
            lcd.print(F("Press A"));
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::paused::BUTTON_PRESS} */
        case BUTTON_PRESS_SIG: {
            ledRed(LOW);
            me->ready_time_remaining = me->ready_timeout_ms;
            QActive_armX((QActive *)me, 0 /*Tick rate */, 10 /* millis */, 10);
            status_ = Q_TRAN(&Sumo_ready);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::ready} ..................................................*/
static QState Sumo_ready(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::ready::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            me->ready_time_remaining -= 10; // reduce by 10 millis.
            float timeToPrint = ((float)me->ready_time_remaining)/1000;
            lcd.clear();
            lcd.print(timeToPrint, 2);
            if(me->ready_time_remaining <= 0){
                QActive_disarmX((QActive *)me, 0 /*Tick rate */);
                QACTIVE_POST((QActive *)me, READY_TIMEOUT_SIG, 0);
            }
            status_ = Q_TRAN(&Sumo_ready);
            break;
        }
        /*${AOs::Sumo::SM::ready::READY_TIMEOUT} */
        case READY_TIMEOUT_SIG: {
            status_ = Q_TRAN(&Sumo_fighting);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::fighting} ...............................................*/
static QState Sumo_fighting(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::fighting} */
        case Q_ENTRY_SIG: {
            lcd.clear();
            lcd.print(F("Scanning"));
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::fighting} */
        case Q_EXIT_SIG: {
            motors.setSpeeds(0, 0);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::fighting::initial} */
        case Q_INIT_SIG: {
            status_ = Q_TRAN(&Sumo_scan_left);
            break;
        }
        /*${AOs::Sumo::SM::fighting::BUTTON_PRESS} */
        case BUTTON_PRESS_SIG: {
            status_ = Q_TRAN(&Sumo_paused);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::fighting::scan_right} ...................................*/
static QState Sumo_scan_right(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::fighting::scan_right} */
        case Q_ENTRY_SIG: {
            motors.setSpeeds(me->turn_speed, -me->turn_speed);
            lcd.clear();
            lcd.print("Right");
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::fighting::scan_right::OPPONENT_ON_LEFT} */
        case OPPONENT_ON_LEFT_SIG: {
            status_ = Q_TRAN(&Sumo_scan_left);
            break;
        }
        /*${AOs::Sumo::SM::fighting::scan_right::OPPONENT_IN_FRONT} */
        case OPPONENT_IN_FRONT_SIG: {
            status_ = Q_TRAN(&Sumo_ram);
            break;
        }
        default: {
            status_ = Q_SUPER(&Sumo_fighting);
            break;
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::fighting::scan_left} ....................................*/
static QState Sumo_scan_left(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::fighting::scan_left} */
        case Q_ENTRY_SIG: {
            motors.setSpeeds(-me->turn_speed, me->turn_speed);
            lcd.clear();
            lcd.print("Left");
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::fighting::scan_left::OPPONENT_ON_RIGHT} */
        case OPPONENT_ON_RIGHT_SIG: {
            status_ = Q_TRAN(&Sumo_scan_right);
            break;
        }
        /*${AOs::Sumo::SM::fighting::scan_left::OPPONENT_IN_FRONT} */
        case OPPONENT_IN_FRONT_SIG: {
            status_ = Q_TRAN(&Sumo_ram);
            break;
        }
        default: {
            status_ = Q_SUPER(&Sumo_fighting);
            break;
        }
    }
    return status_;
}
/*${AOs::Sumo::SM::fighting::ram} ..........................................*/
static QState Sumo_ram(Sumo * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::Sumo::SM::fighting::ram} */
        case Q_ENTRY_SIG: {
            uint8_t confidence = Q_PAR(me);
            int speed = (2 * ((float)confidence)/100) * me->turn_speed;
            motors.setSpeeds(speed, speed);
            lcd.clear();
            lcd.print("S:");lcd.print(speed);
            status_ = Q_HANDLED();
            break;
        }
        /*${AOs::Sumo::SM::fighting::ram::OPPONENT_ON_LEFT} */
        case OPPONENT_ON_LEFT_SIG: {
            status_ = Q_TRAN(&Sumo_scan_left);
            break;
        }
        /*${AOs::Sumo::SM::fighting::ram::OPPONENT_ON_RIGHT} */
        case OPPONENT_ON_RIGHT_SIG: {
            status_ = Q_TRAN(&Sumo_scan_right);
            break;
        }
        default: {
            status_ = Q_SUPER(&Sumo_fighting);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::Sumo} ######################################################*/
/*$define${AOs::ButtonEvtSimulator} ########################################*/
/*${AOs::ButtonEvtSimulator} ...............................................*/
/*${AOs::ButtonEvtSimulat~::SM} ............................................*/
static QState ButtonEvtSimulator_initial(ButtonEvtSimulator * const me) {
    /*${AOs::ButtonEvtSimulat~::SM::initial} */
    QActive_armX(&me->super, 0 /*Tick rate */, me->period /* millis */, me->period);
    return Q_TRAN(&ButtonEvtSimulator_running);
}
/*${AOs::ButtonEvtSimulat~::SM::running} ...................................*/
static QState ButtonEvtSimulator_running(ButtonEvtSimulator * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ButtonEvtSimulat~::SM::running::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            //lcd.clear();
            //lcd.print(F("Timer"));

            if (buttonA.getSingleDebouncedPress()) {
                QACTIVE_POST((QActive *)&AO_Sumo, BUTTON_PRESS_SIG, 0);
            }
            status_ = Q_TRAN(&ButtonEvtSimulator_running);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::ButtonEvtSimulator} ########################################*/
/*$define${AOs::ProximityEvtSimulator} #####################################*/
/*${AOs::ProximityEvtSimulator} ............................................*/
/*${AOs::ProximityEvtSimu~::getConfidence} .................................*/
static uint8_t ProximityEvtSimulator_getConfidence(uint8_t highValue, uint8_t lowValue) {
    float diff = (float)(highValue - lowValue);
    return 100 * diff/proxSensors.getNumBrightnessLevels();
}

/*${AOs::ProximityEvtSimu~::SM} ............................................*/
static QState ProximityEvtSimulator_initial(ProximityEvtSimulator * const me) {
    /*${AOs::ProximityEvtSimu~::SM::initial} */
    proxSensors.initThreeSensors();
    QActive_armX(&me->super, 0 /*Tick rate */, me->period /* millis */, me->period);
    return Q_TRAN(&ProximityEvtSimulator_running);
}
/*${AOs::ProximityEvtSimu~::SM::running} ...................................*/
static QState ProximityEvtSimulator_running(ProximityEvtSimulator * const me) {
    QState status_;
    switch (Q_SIG(me)) {
        /*${AOs::ProximityEvtSimu~::SM::running::Q_TIMEOUT} */
        case Q_TIMEOUT_SIG: {
            proxSensors.read();
            uint8_t leftCount = proxSensors.countsFrontWithLeftLeds();
            uint8_t rightCount = proxSensors.countsFrontWithRightLeds();
            //lcd.clear();
            //lcd.print("LPC:");
            //lcd.print(leftCount);
            //lcd.gotoXY(0, 1);
            //lcd.print("RPC:");
            //lcd.print(rightCount);
            if(leftCount > rightCount) {
              uint8_t confidence = ProximityEvtSimulator_getConfidence(leftCount, rightCount);
              QACTIVE_POST((QActive *)&AO_Sumo, OPPONENT_ON_LEFT_SIG, confidence);
              //lcd.clear();
              //lcd.print("GoLft");
            } else if (rightCount > leftCount) {
              uint8_t confidence = ProximityEvtSimulator_getConfidence(rightCount, leftCount);
              QACTIVE_POST((QActive *)&AO_Sumo, OPPONENT_ON_RIGHT_SIG, confidence);
              //lcd.clear();
              //lcd.print("GoRgt");
            }
            else {
              uint8_t confidence = ProximityEvtSimulator_getConfidence(rightCount, 0);
              QACTIVE_POST((QActive *)&AO_Sumo, OPPONENT_IN_FRONT_SIG, confidence);
            }
            status_ = Q_TRAN(&ProximityEvtSimulator_running);
            break;
        }
        default: {
            status_ = Q_SUPER(&QHsm_top);
            break;
        }
    }
    return status_;
}
/*$enddef${AOs::ProximityEvtSimulator} #####################################*/
//...
