The following code works:
ISR(TIMER4_OVF_vect) {
    QF_tickXISR(0); // process time events for tick rate 0
}

// Timer/Counter 4 initialization
// Clock: Sync. 15.625 kHz
// Mode: Normal top=OCR4C
// OC4A output: OC4A=Disc. /OC4A=Disc.
// OC4B output: OC4B=Disc. /OC4B=Disc.
// OC4D output: OC4D=Disc. /OC4D=Disc.
// Fault Protection: Off
// Fault Protection Noise Canceler: Off
// Fault Protection triggered on Falling Edge
// Timer4 Overflow Interrupt: On
// Compare A Match Interrupt: Off
// Compare B Match Interrupt: Off
// Compare D Match Interrupt: Off
// Fault Protection Interrupt: Off
// Dead Time Prescaler: 1
// Dead Time Rising Edge: 0.000 us
// Dead Time Falling Edge: 0.000 us
// Timer Period: 40 ms

// Set Timer4 for synchronous operation
PLLFRQ&=(1<<PINMUX) | (1<<PLLUSB) | (0<<PLLTM1) | (0<<PLLTM0) | (1<<PDIV3) | (1<<PDIV2) | (1<<PDIV1) | (1<<PDIV0);

TCCR4A=(0<<COM4A1) | (0<<COM4A0) | (0<<COM4B1) | (0<<COM4B0) | (0<<FOC4A) | (0<<FOC4B) | (0<<PWM4A) | (0<<PWM4B);
TCCR4B=(0<<PWM4X) | (0<<PSR4) | (0<<DTPS41) | (0<<DTPS40) | (1<<CS43) | (0<<CS42) | (1<<CS41) | (1<<CS40);
TCCR4C=(0<<COM4A1S) | (0<<COM4A0S) | (0<<COM4B1S) | (0<<COM4B0S) | (0<<COM4D1) | (0<<COM4D0) | (0<<FOC4D) | (0<<PWM4D);
TCCR4D=(0<<FPIE4) | (0<<FPEN4) | (0<<FPNC4) | (0<<FPES4) | (0<<FPAC4) | (0<<FPF4) | (0<<WGM41) | (0<<WGM40);
TCCR4E=(0<<TLOCK4) | (0<<ENHC4) | (0<<OC4OE5) | (0<<OC4OE4) | (0<<OC4OE3) | (0<<OC4OE2) | (0<<OC4OE1) | (0<<OC4OE0);
TC4H=0x00;
TCNT4=0x00;
TC4H=0x00;
OCR4A=0x00;
TC4H=0x00;
OCR4B=0x00;
//TC4H=0x02;
OCR4C = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U; //OCR4C  = (F_CPU / BSP_TICKS_PER_SEC / 1024U) - 1U;
//OCR4C=0x70;
TC4H=0x00;
OCR4D=0x00;
DT4=0x00;

// Timer/Counter 4 Interrupt(s) initialization
TIMSK4=(0<<OCIE4D) | (0<<OCIE4A) | (0<<OCIE4B) | (1<<TOIE4);


******************

